@page "/"
@using SearchCacher.Data;
@using System.ComponentModel.DataAnnotations;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Notifications;
@using Syncfusion.Blazor.Popups;
@using System.Collections.ObjectModel;
@inject ISearchService searchService
@inject IJSRuntime JSRuntime

<PageTitle>OnlySearch</PageTitle>

<SfToast ID="toast_default" @ref="data.ToastObj" Title="Info" Timeout="5000" Icon="e-meeting">
    <ToastPosition X="Right" Y="Top" />
</SfToast>

<div>
    <div style="padding-bottom:2px">
        <table style="background-color:#1F2937">
            <thead>
                <tr>
                    <th style="color:#00B4F0;font-size:medium;font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;padding-top:10px;padding-left:15px">Settings</th>
                    <th style="color:#00B4F0;font-size:medium;font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;padding-top:10px;padding-left:10px">Info</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="padding:10px;margin-right:30px">
                        <table style="margin:10px;white-space:nowrap">
                            <thead>
                                <tr>
                                    <th style="padding-right:30px"></th>
                                    <th style="padding-right:30px">Status</th>
                                    <th>Setting</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <SfTooltip Target="#searchOnlyFileExtIcon" Content="Searches only in file extensions and ignores all other settings" Position="Position.RightCenter" IsSticky="false" ShowTipPointer="false" CloseDelay="10" OpensOn="Hover">
                                            <svg id="searchOnlyFileExtIcon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                                <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2">
                                                    <path stroke-dasharray="64" stroke-dashoffset="64" d="M12 3c4.97 0 9 4.03 9 9c0 4.97 -4.03 9 -9 9c-4.97 0 -9 -4.03 -9 -9c0 -4.97 4.03 -9 9 -9Z">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" dur="0.6s" values="64;0" />
                                                    </path>
                                                    <path stroke-dasharray="16" stroke-dashoffset="16" d="M9 10c0 -1.66 1.34 -3 3 -3c1.66 0 3 1.34 3 3c0 0.98 -0.47 1.85 -1.2 2.4c-0.73 0.55 -1.3 0.6 -1.8 1.6">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.6s" dur="0.2s" values="16;0" />
                                                    </path>
                                                    <path stroke-dasharray="2" stroke-dashoffset="2" d="M12 17v0.01">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.8s" dur="0.2s" values="2;0" />
                                                    </path>
                                                </g>
                                            </svg>
                                        </SfTooltip>
                                    </td>
                                    <td><SfSwitch style="margin-top:3px" @bind-Checked="data.SearchOnlyFileExt" /></td>
                                    <td>Only search in extensions</td>
                                </tr>
                                <tr>
                                    <td>
                                        <SfTooltip Target="#searchInFilesIcon" Content="Searches in file content, this can take a VERY long time depending on the amount of data. Searches only in files which extension was selected below." Position="Position.RightCenter" IsSticky="false" ShowTipPointer="false" CloseDelay="10" OpensOn="Hover">
                                            <svg id="searchInFilesIcon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                                <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2">
                                                    <path stroke-dasharray="64" stroke-dashoffset="64" d="M12 3c4.97 0 9 4.03 9 9c0 4.97 -4.03 9 -9 9c-4.97 0 -9 -4.03 -9 -9c0 -4.97 4.03 -9 9 -9Z">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" dur="0.6s" values="64;0" />
                                                    </path>
                                                    <path stroke-dasharray="16" stroke-dashoffset="16" d="M9 10c0 -1.66 1.34 -3 3 -3c1.66 0 3 1.34 3 3c0 0.98 -0.47 1.85 -1.2 2.4c-0.73 0.55 -1.3 0.6 -1.8 1.6">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.6s" dur="0.2s" values="16;0" />
                                                    </path>
                                                    <path stroke-dasharray="2" stroke-dashoffset="2" d="M12 17v0.01">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.8s" dur="0.2s" values="2;0" />
                                                    </path>
                                                </g>
                                            </svg>
                                        </SfTooltip>
                                    </td>
                                    <td><SfSwitch style="margin-top:3px" @bind-Checked="data.SearchInFiles" /></td>
                                    <td>Search in files</td>
                                </tr>
                                <tr>
                                    <td>
                                        <SfTooltip Target="#searchOnFullPathIcon" Content="Contrary to the regular search which only considers directory and file names, this feature uses the full path of the directory and files. This allowes for more complex searches like finding some folders containing the text tax and then maybe a date for example." Position="Position.RightCenter" IsSticky="false" ShowTipPointer="false" CloseDelay="10" OpensOn="Hover">
                                            <svg id="searchOnFullPathIcon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                                <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2">
                                                    <path stroke-dasharray="64" stroke-dashoffset="64" d="M12 3c4.97 0 9 4.03 9 9c0 4.97 -4.03 9 -9 9c-4.97 0 -9 -4.03 -9 -9c0 -4.97 4.03 -9 9 -9Z">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" dur="0.6s" values="64;0" />
                                                    </path>
                                                    <path stroke-dasharray="16" stroke-dashoffset="16" d="M9 10c0 -1.66 1.34 -3 3 -3c1.66 0 3 1.34 3 3c0 0.98 -0.47 1.85 -1.2 2.4c-0.73 0.55 -1.3 0.6 -1.8 1.6">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.6s" dur="0.2s" values="16;0" />
                                                    </path>
                                                    <path stroke-dasharray="2" stroke-dashoffset="2" d="M12 17v0.01">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.8s" dur="0.2s" values="2;0" />
                                                    </path>
                                                </g>
                                            </svg>
                                        </SfTooltip>
                                    </td>
                                    <td><SfSwitch style="margin-top:3px" @bind-Checked="data.SearchOnFullPath" /></td>
                                    <td>Search on full path</td>
                                </tr>
                                <tr>
                                    <td>
                                        <SfTooltip Target="#searchForDirsIcon" Content="Searches in directory names for results" Position="Position.RightCenter" IsSticky="false" ShowTipPointer="false" CloseDelay="10" OpensOn="Hover">
                                            <svg id="searchForDirsIcon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                                <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2">
                                                    <path stroke-dasharray="64" stroke-dashoffset="64" d="M12 3c4.97 0 9 4.03 9 9c0 4.97 -4.03 9 -9 9c-4.97 0 -9 -4.03 -9 -9c0 -4.97 4.03 -9 9 -9Z">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" dur="0.6s" values="64;0" />
                                                    </path>
                                                    <path stroke-dasharray="16" stroke-dashoffset="16" d="M9 10c0 -1.66 1.34 -3 3 -3c1.66 0 3 1.34 3 3c0 0.98 -0.47 1.85 -1.2 2.4c-0.73 0.55 -1.3 0.6 -1.8 1.6">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.6s" dur="0.2s" values="16;0" />
                                                    </path>
                                                    <path stroke-dasharray="2" stroke-dashoffset="2" d="M12 17v0.01">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.8s" dur="0.2s" values="2;0" />
                                                    </path>
                                                </g>
                                            </svg>
                                        </SfTooltip>
                                    </td>
                                    <td><SfSwitch style="margin-top:3px" @bind-Checked="data.SearchForDirs" /></td>
                                    <td>Directories</td>
                                </tr>
                                <tr>
                                    <td>
                                        <SfTooltip Target="#searchForFilesIcon" Content="Searches in files for results. This feature is required by some other features to work. Other features will enable required features automatically." Position="Position.RightCenter" IsSticky="false" ShowTipPointer="false" CloseDelay="10" OpensOn="Hover">
                                            <svg id="searchForFilesIcon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                                <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2">
                                                    <path stroke-dasharray="64" stroke-dashoffset="64" d="M12 3c4.97 0 9 4.03 9 9c0 4.97 -4.03 9 -9 9c-4.97 0 -9 -4.03 -9 -9c0 -4.97 4.03 -9 9 -9Z">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" dur="0.6s" values="64;0" />
                                                    </path>
                                                    <path stroke-dasharray="16" stroke-dashoffset="16" d="M9 10c0 -1.66 1.34 -3 3 -3c1.66 0 3 1.34 3 3c0 0.98 -0.47 1.85 -1.2 2.4c-0.73 0.55 -1.3 0.6 -1.8 1.6">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.6s" dur="0.2s" values="16;0" />
                                                    </path>
                                                    <path stroke-dasharray="2" stroke-dashoffset="2" d="M12 17v0.01">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.8s" dur="0.2s" values="2;0" />
                                                    </path>
                                                </g>
                                            </svg>
                                        </SfTooltip>
                                    </td>
                                    <td><SfSwitch style="margin-top:3px" @bind-Checked="data.SearchForFiles" /></td>
                                    <td>Files</td>
                                </tr>
                                <tr>
                                    <td>
                                        <SfTooltip Target="#caseSensitiveIcon" Content="The search will ignore text case if disabled." Position="Position.RightCenter" IsSticky="false" ShowTipPointer="false" CloseDelay="10" OpensOn="Hover">
                                            <svg id="caseSensitiveIcon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                                <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2">
                                                    <path stroke-dasharray="64" stroke-dashoffset="64" d="M12 3c4.97 0 9 4.03 9 9c0 4.97 -4.03 9 -9 9c-4.97 0 -9 -4.03 -9 -9c0 -4.97 4.03 -9 9 -9Z">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" dur="0.6s" values="64;0" />
                                                    </path>
                                                    <path stroke-dasharray="16" stroke-dashoffset="16" d="M9 10c0 -1.66 1.34 -3 3 -3c1.66 0 3 1.34 3 3c0 0.98 -0.47 1.85 -1.2 2.4c-0.73 0.55 -1.3 0.6 -1.8 1.6">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.6s" dur="0.2s" values="16;0" />
                                                    </path>
                                                    <path stroke-dasharray="2" stroke-dashoffset="2" d="M12 17v0.01">
                                                        <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.8s" dur="0.2s" values="2;0" />
                                                    </path>
                                                </g>
                                            </svg>
                                        </SfTooltip>
                                    </td>
                                    <td><SfSwitch style="margin-top:3px" @bind-Checked="data.CaseSensitive" /></td>
                                    <td>Case sensitive search</td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                    <td style="padding-left:10px;padding-right:30px;width:100%">
                        <div style="font-size:15px">
                            Enabling only extensions makes the search absolut. Meaning that only the specified extension will be searched for. <br />
                            Example: You want to search for all txt files. Input only .txt in the search box, all other settings do not matter.<br />
                            <br />
                            Enabling search in files will search in the content of the files, but only in files with the selected extensions <br />
                            <br />
                            The search pattern is Regex based. <a href="https://regex101.com/" target="_blank">You can test and generate regex patterns here.</a><br />
                            Tl:dr; writing only a word, for example 'test' will find all paths involing this word, regardless of upper or lower case and anywhere in the path. <br />
                            It does not matter if the word has something before or after it. Writing 'subfolder*.*test' will find all paths that have at some point subfolder in it and AFTER it somewhere test. <br />
                            The search will only search in paths if you enable the option, this will take a bit more time, but not that much more.
                            <br />
                            Search paths * is equal to the base path of the search: @searchService.SearchPath
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <SfAccordion Width="auto" LoadOnDemand="false">
        <AccordionItems>
            <AccordionItem @ref="data.FileExtensionsAccordionItem" Header="File Extensions" Expanded="@data.FileExtensionsAccordionItemExpanded" Visible=@data.SearchInFiles>
                <ContentTemplate>
                    <div style="background:#232E3E;border:solid #232E3E;border-width:thick">
                        <div style="display:flex;flex-direction:column;background:#34455d;margin:4pt">
                            <div style="display:flex;flex-direction:row;text-align:center;align-items:center;min-height:34px;margin-left:10px;margin-right:10px">
                                <SfButton @onclick="() => AddFileExtension(TextFileExtensions)">Add Text Extensions</SfButton>
                                <SfButton @onclick="() => AddFileExtension(CodingFileExtensions)">Add Coding Extensions</SfButton>
                                <SfTextBox Multiline="false" @bind-Value="data.CustomExt" style="margin-left:20px;width:200px" Width="200px" />
                                <SfButton @onclick="() => AddFileExtension([data.CustomExt])">Add Custom Extensions</SfButton>
                            </div>
                            <div style="margin:10px;display:flex;flex-direction:row;flex-wrap:wrap">
                                @foreach (FileExtensionEntry entry in data.FileExtensions)
                                {
                                    <div style="margin-right:3px"><SfSwitch style="margin-top:5px" @bind-Checked="entry.IsSelected" /> <label style="padding: 3px;justify-content: center;"> @entry.Name</label></div>
                                }
                            </div>
                        </div>
                    </div>
                </ContentTemplate>
            </AccordionItem>
            <AccordionItem Header="Path List" Expanded="false">
                <ContentTemplate>
                    <div style="background:#232E3E;border:solid #232E3E;border-width:thick">
                        @foreach (WebDBConfigModel dbConfig in data.Cfg?.DBConfigs ?? [])
                        {
                            <div style="display:flex;flex-direction:column;background:#34455d;margin:4pt">
                                <div style="display:flex;flex-direction:row;text-align:center;align-items:center;min-height:34px;margin-left:10px;margin-right:10px">
                                    <SfSwitch @bind-Checked="dbConfig.IsSelected" /> <span style="margin-left:10px;margin-right:20px;width:auto;white-space:nowrap">Use in search?</span>
                                    <SfSwitch @bind-Checked="dbConfig.UseIgnoreList" /><span style="margin-left:10px;white-space:nowrap">Use ignore list?</span>
                                    <span style="margin-left:20px;margin-right:20px;white-space:nowrap">@dbConfig.RootPath</span>
                                    <span style="margin-right:5px;width:auto;white-space:nowrap">Search path:</span>
                                    <SfTextBox Multiline="false" @bind-Value="dbConfig.SearchPath" style="min-width:200px" />
                                </div>
                                <div style="align-items:start">
                                    <SfAccordion Width="auto" LoadOnDemand="false">
                                        <AccordionItems>
                                            <AccordionItem Header="Ignored Paths List" Expanded="false">
                                                <ContentTemplate>
                                                    <SfGrid TValue="IgnoreListEntry" DataSource="@dbConfig.IgnoreList" AllowSorting="true" EnableVirtualization="true" Height="100" EnableInfiniteScrolling="true" AllowSelection="false">
                                                        <GridColumns>
                                                            <GridColumn IsPrimaryKey="true">
                                                                <Template>
                                                                    <div style="margin-left:10px">@((context as IgnoreListEntry)?.Path)</div>
                                                                </Template>
                                                            </GridColumn>
                                                        </GridColumns>
                                                    </SfGrid>
                                                </ContentTemplate>
                                            </AccordionItem>
                                        </AccordionItems>
                                    </SfAccordion>
                                </div>
                            </div>
                        }
                    </div>
                </ContentTemplate>
            </AccordionItem>
        </AccordionItems>
    </SfAccordion>
    <br />

    <div style="display:flex;flex-direction:row;text-align:center;align-items:center">
        <span style="margin-left:5px;margin-right:5px">Pattern:</span>
        <SfTextBox Multiline="false" Placeholder="*nua*" @bind-Value="data.Pattern" style="min-width:400px" @onkeyup="@PatternTextBoxKeyUp" />
        <div style="position:relative;width:50px;margin:5px;display:@data.SpinnerDisplayMode;visibility:@data.SpinnerVisibility">
            <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24">
                <g fill="none" stroke="#64a0e8" stroke-linecap="round" stroke-linejoin="round" stroke-width="3">
                    <path stroke-dasharray="16" stroke-dashoffset="16" d="M12 3c4.97 0 9 4.03 9 9">
                        <animate fill="freeze" attributeName="stroke-dashoffset" dur="0.3s" values="16;0" />
                        <animateTransform attributeName="transform" dur="1.5s" repeatCount="indefinite" type="rotate" values="0 12 12;360 12 12" />
                    </path>
                    <path stroke-dasharray="64" stroke-dashoffset="64" stroke-opacity="0.3" d="M12 3c4.97 0 9 4.03 9 9c0 4.97 -4.03 9 -9 9c-4.97 0 -9 -4.03 -9 -9c0 -4.97 4.03 -9 9 -9Z">
                        <animate fill="freeze" attributeName="stroke-dashoffset" dur="1.2s" values="64;0" />
                    </path>
                </g>
            </svg>
        </div>
        <SfButton style="margin:5px" @onclick=Search>Search</SfButton>
    </div>

    <SfGrid @ref="FileGrid" TValue="string" DataSource="@data.Paths" AllowSorting="true" ContextMenuItems="@FileGridContextMenuItems" EnableVirtualization="true" Height="800">
        <GridSelectionSettings Mode="SelectionMode.Row" EnableSimpleMultiRowSelection="false"></GridSelectionSettings>
        <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="string"></GridEvents>
        <GridColumns>
            <GridColumn HeaderText="File" IsPrimaryKey="true">
                <Template>
                    @{
                        <div>@(context as string)</div>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>

    <br />
    Last search time @data.LastSearchTime min:sec:ms
</div>

<script>
    async function copyClipboard(text) {
    console.log(text);

    try {
    await navigator.clipboard.writeText(text);
    } catch (error) {
    console.error(error.message);
    }
    }
</script>

@code {
    class FormData
    {
        public SfToast? ToastObj;
        public AccordionItem? FileExtensionsAccordionItem;

        public bool FileExtensionsAccordionItemExpanded { get; set; } = false;
        public bool IsSpinnerVisible { get; set; } = false;

        public string SpinnerVisibility { get; set; } = "collapse";
        public string SpinnerDisplayMode { get; set; } = "none";

        public List<string?> Paths { get; set; } = [];
        public string Pattern { get; set; } = "nua*";

        public Task<IEnumerable<ISearcher.SearchResult>>? SearchTask;

        [Required]
        [Range(typeof(bool), "false", "true")]
        public bool SearchOnlyFileExt
        {
            get => _searchOnlyFileExt;
            set
            {
                _searchOnlyFileExt = value;
                if (value)
                {
                    FileExtensionsAccordionItemExpanded = true;
                    SearchInFiles = false;
                    SearchOnFullPath = false;
                    SearchForDirs = false;
                    SearchForFiles = true;
                }
            }
        }

        [Required]
        [Range(typeof(bool), "false", "true")]
        public bool SearchInFiles
        {
            get => _searchInFiles;
            set
            {
                _searchInFiles = value;
                if (value)
                {
                    FileExtensionsAccordionItemExpanded = true;
                    SearchOnlyFileExt = false;
                    SearchForFiles = true;
                }
            }
        }

        public ObservableCollection<FileExtensionEntry> FileExtensions { get; set; } = [];

        [Required]
        [Range(typeof(bool), "false", "true")]
        public bool SearchOnFullPath
        {
            get => _searchOnFullPath;
            set
            {
                _searchOnFullPath = value;
                if (value)
                    SearchOnlyFileExt = false;
            }
        }

        [Required]
        [Range(typeof(bool), "false", "true")]
        public bool SearchForDirs
        {
            get => _searchForDirs;
            set
            {
                _searchForDirs = value;
                if (value)
                    SearchOnlyFileExt = false;
            }
        }

        [Required]
        [Range(typeof(bool), "false", "true")]
        public bool SearchForFiles
        {
            get => _searchForFiles;
            set
            {
                _searchForFiles = value;
                if (!value)
                {
                    SearchOnlyFileExt = false;
                    SearchInFiles = false;
                }
            }
        }

        [Required]
        [Range(typeof(bool), "false", "true")]
        public bool CaseSensitive { get; set; } = false;

        [Required]
        [Range(typeof(bool), "false", "true")]
        public bool SpinnerVisible { get; set; } = false;

        public string CustomExt { get; set; } = "";

        public string? LastSearchTime { get; set; } = null;

        public WebConfigModel? Cfg { get; set; } = null;

        private bool _searchOnlyFileExt = false;
        private bool _searchInFiles = false;
        private bool _searchOnFullPath = false;
        private bool _searchForDirs = true;
        private bool _searchForFiles = true;
    }

    class FileExtensionEntry
    {
        public bool IsSelected { set; get; }

        public string Name { set; get; }

        public FileExtensionEntry(bool isSelected, string name)
        {
            IsSelected = isSelected;
            Name = name;
        }
    }

    FormData data = new FormData();

    private SfGrid<string>? FileGrid;

    List<object> FileGridContextMenuItems = new()
    {
        new ContextMenuItemModel() { Text = "Copy filename", Target = ".e-content", Id = "copyfilename" },
        new ContextMenuItemModel() { Text = "Copy folderpath", Target = ".e-content", Id = "copyfolderpath" },
        new ContextMenuItemModel() { Text = "Copy path", Target = ".e-content", Id = "copypath" },
        new ContextMenuItemModel() { Text = "Search in path", Target = ".e-content", Id = "searchinpath" },
    };

    private readonly string[] TextFileExtensions =
                                                                [
        ".txt",
        ".doc",
        ".docx",
        ".pptx",
        ".json",
        ".xml",
        ".pdf",
    ];

    private readonly string[] CodingFileExtensions =
                                                                [
        ".log",
        ".json",
        ".xml",
        ".cs",
        ".cpp",
        ".h",
        ".hpp",
        ".c",
        ".java",
        ".py",
        ".sh",
        ".bat",
        ".ps1",
    ];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        data.Cfg = searchService.GetWebConfigModel();
    }

    protected async Task Search()
    {
        if (data.SearchTask is not null)
        {
            ShowToast("Previous search is still in progress...", 10000);
            return;
        }

        if (string.IsNullOrWhiteSpace(data.Pattern))
        {
            ShowToast("Empty search pattern is not allowed.", 10000);
            return;
        }

        try
        {
            if (!data.SearchOnlyFileExt)
                System.Text.RegularExpressions.Regex.IsMatch("", data.Pattern);
        }
        catch (ArgumentException)
        {
            ShowToast("Pattern is not a valid regex pattern", 10000);
            return;
        }

        ShowToast("Starting search...");
        data.IsSpinnerVisible = true;
        SetSpinnerVisibility(true);
        await Task.Delay(100);
        data.Paths = [];

        DateTime preSearch = DateTime.Now;

        // Prepare list of paths to be used
        var searchSettings = new SearchSettings(
            pattern: data.Pattern,
            searchOnlyFileExt: data.SearchOnlyFileExt,
            searchInFiles: data.SearchInFiles,
            searchDirs: data.SearchForDirs,
            searchFiles: data.SearchForFiles,
            searchOnFullPath: data.SearchOnFullPath,
            caseSensitive: data.CaseSensitive,
            fileExtensions: data.FileExtensions.Where(ext => ext.IsSelected).Select(ext => ext.Name).ToArray());

        foreach (var config in data.Cfg?.DBConfigs ?? [])
        {
            if (config.IsSelected)
                searchSettings.SearchPaths.Add(new SearchPathSettings(config.ID ?? string.Empty, config.SearchPath, config.UseIgnoreList));
        }

        data.SearchTask = searchService.GetSearchResult(searchSettings);
        await data.SearchTask;
        if (data.SearchTask.Status != TaskStatus.RanToCompletion)
        {
            await Task.Delay(100);
            ShowToast("Failed to complete search. Ex: " + data.SearchTask.Exception?.ToString(), 10000);
            return;
        }

        IEnumerable<ISearcher.SearchResult> results = data.SearchTask.Result;

        data.LastSearchTime = (DateTime.Now - preSearch).ToString(@"mm\:ss\:ffff", new System.Globalization.CultureInfo("en-US"));
        data.IsSpinnerVisible = false;
        SetSpinnerVisibility(false);
        data.SearchTask = null;

        foreach (var result in results)
        {
            await Task.Delay(100);
            if (!result.Success)
                ShowToast(result.Error, 10000);
            else
                data.Paths.AddRange(result.Result);
        }

        await Task.Delay(100);
        ShowToast("Finished search");
    }

    protected async void ShowToast(string info, int timeout = 5000)
    {
        await this.data.ToastObj.ShowAsync(new ToastModel()
            {
                Content = info,
                Timeout = timeout
            });
    }

    public void OnContextMenuClick(ContextMenuClickEventArgs<string> args)
    {
        var selectionTask = FileGrid.GetSelectedRecordsAsync();
        if (!selectionTask.Wait(5000))
        {
            ShowToast("Failed to copy to clipboard");
            return;
        }

        var entries = selectionTask.Result;
        if (entries.Count == 0)
        {
            ShowToast("Somehow no path was selected in the grid, please try again...");
            return;
        }

        List<string> copyText = new List<string>();

        if (args.Item.Id == "searchinpath")
        {
            if (entries.Count > 1)
            {
                // We do not know which path is the desired search path
                ShowToast("More than 1 path is selected, please only select one in order to use it as the search path");
                return;
            }

            var dirName = Path.GetDirectoryName(entries.First()) ?? "";

            foreach (var config in data.Cfg?.DBConfigs ?? [])
            {
                if (dirName.Contains(config.SearchPath))
                {
                    config.SearchPath = dirName;
                    break;
                }
            }
        }
        else
            foreach (var entry in entries)
                if (args.Item.Id == "copyfilename")
                    copyText.Add(Path.GetFileName(entry));
                else if (args.Item.Id == "copyfolderpath")
                    copyText.Add(Path.GetDirectoryName(entry));
                else if (args.Item.Id == "copypath")
                    copyText.Add(entry);

        JSRuntime.InvokeVoidAsync("copyClipboard", string.Join(";", string.Join(";", copyText)));
    }

    public async void PatternTextBoxKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            // We have to do it like that here as it seems like that the event is not in the UI thread for whatever reason
            await InvokeAsync(Search);
            StateHasChanged();
        }
    }

    public void AddFileExtension(string[] names)
    {
        foreach (var name in names)
        {
            if (string.IsNullOrWhiteSpace(name) || data.FileExtensions.Any(x => x.Name == name))
                continue;

            data.FileExtensions.Add(new FileExtensionEntry(true, name));
        }

        StateHasChanged();
    }

    public void SetSpinnerVisibility(bool visible)
    {
        data.SpinnerVisibility = visible ? "visible" : "collapse";
        data.SpinnerDisplayMode = visible ? "block" : "none";
        StateHasChanged();
    }
}