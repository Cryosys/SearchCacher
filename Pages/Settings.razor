@page "/settings"
@using SearchCacher.Data
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Spinner;
@inject ISearchService SearchService

@if (!IsValidUser())
    return;

<SfToast ID="toast_default" @ref="ToastObj" Title="Info" Timeout="5000" Icon="e-meeting">
    <ToastPosition X="Right" Y="Bottom" />
</SfToast>

<table style="margin:10px;white-space:nowrap" cellpadding="4,2">
    <thead>
        <tr>
            <th style="padding-right:30px;min-width:220px">Setting</th>
            <th style="padding-right:30px">Status</th>
            <th style="padding-right:30px">Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Search Path:</td>
            <td>
                <SfTextBox Multiline="false" @bind-Value="Cfg.SearchPath" style="min-width:400px" />
            </td>
            <td>
                The search path is the actual path to the root directory of the storage you want to search through. <br />
                E.g. '\\some.storage.net\some root path\folder to search in'. Do not escape the path like this -> '\\\\some.storage.net\\some root path\\folder to search in'
            </td>
        </tr>
        <tr>
            <td>Username:</td>
            <td>
                <SfTextBox Multiline="false" @bind-Value="Cfg.UserName" style="min-width:400px" />
            </td>
        </tr>
        <tr>
            <td>Password:</td>
            <td>
                <SfTextBox Multiline="false" @bind-Value="Cfg.Password" style="min-width:400px" />
            </td>
            <td>
                <div style="display:flex;flex-direction:row;text-align:center;align-items:center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="margin:10px">
                        <g fill="none" stroke="#fb6f6f" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5">
                            <path stroke-dasharray="60" stroke-dashoffset="60" d="M12 3L21 20H3L12 3Z">
                                <animate fill="freeze" attributeName="stroke-dashoffset" dur="0.75s" values="60;0" />
                            </path>
                            <path stroke-dasharray="6" stroke-dashoffset="6" d="M12 10V14">
                                <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.9s" dur="0.3s" values="6;0" />
                            </path>
                        </g>
                        <circle cx="12" cy="17" r="1" fill="#fb6f6f" fill-opacity="0">
                            <animate fill="freeze" attributeName="fill-opacity" begin="1.2s" dur="0.6s" values="0;1" />
                        </circle>
                    </svg>
                    <div style="position: relative">
                        The password will never be shown here and never be copied into the temporary settings data from the actual config so that the password is never exposed to the web service.
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td>Watchdog files filter:</td>
            <td>
                <SfTextBox Multiline="false" @bind-Value="Cfg.WatchDogFilter" style="min-width:400px" />
            </td>
            <td>
                Info about the filter can be found here: <a href="https://learn.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher.filter?view=net-8.0" target="_blank" class="a-text">.NET FileSystemWatcher</a>
            </td>
        </tr>
        <tr>
            <td>File DB path:</td>
            <td>
                <SfTextBox Multiline="false" @bind-Value="Cfg.FileDBPath" style="min-width:400px" />
            </td>
            <td>
                The file DB can become a large file and should be, if possible, stored on a storage media that is not going to break fast. <br />
                The database will, if enabled, be autosaved every x minutes which can put quite the strain on the drive. <br />
                In theory the DB does not need to be saved that often and could only be saved on stop of the service/app. <br />
                But keep in mind that if the service breaks for what ever reason you most likely will need to reinitalize it.
            </td>
        </tr>
        <tr>
            <td>Autosave:</td>
            <td>
                <SfSwitch @bind-Checked="Cfg.AutoSaveEnabled" />
            </td>
        </tr>
        <tr>
            <td>Autosave interval in minutes:</td>
            <td>
                <SfNumericTextBox @bind-Value="Cfg.AutoSaveInterval" Step="1" style="min-width:400px" />
            </td>
        </tr>
    </tbody>
</table>
<br />

<div style="display:flex;flex-direction:row;text-align:center;align-items:center">
    <SfButton style="margin:5px" @onclick=SetConfig>Save Config</SfButton>
    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" style="margin:10px">
        <g fill="none" stroke="#fb6f6f" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5">
            <path stroke-dasharray="60" stroke-dashoffset="60" d="M12 3L21 20H3L12 3Z">
                <animate fill="freeze" attributeName="stroke-dashoffset" dur="0.75s" values="60;0" />
            </path>
            <path stroke-dasharray="6" stroke-dashoffset="6" d="M12 10V14">
                <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.9s" dur="0.3s" values="6;0" />
            </path>
        </g>
        <circle cx="12" cy="17" r="1" fill="#fb6f6f" fill-opacity="0">
            <animate fill="freeze" attributeName="fill-opacity" begin="1.2s" dur="0.6s" values="0;1" />
        </circle>
    </svg>
    <div style="position: relative">
        Saving the config only applies after restarting the service! <br />
        This will also delete the old DB and needs to be re-initialized.
    </div>
</div>

<br />

<div style="display:flex;flex-direction:row;text-align:center;align-items:center">
    <SfButton style="margin:5px" @onclick=InitDB>Init DB</SfButton>
    <SfButton style="margin:5px" @onclick=DelDB>Delete DB</SfButton>
    <SfButton style="margin:5px" @onclick=SaveDB>Save DB</SfButton>
    <div style="position: relative;width:50px">
        <SfSpinner Size="20" @bind-Visible="@IsSpinnerVisible" />
    </div>
</div>

<br />
@currentDir
<br />

<div style="display:flex;flex-direction:row;text-align:center;align-items:center">
    <SfButton style="margin-right:5px;margin-bottom:5px;margin-top:5px" @onclick=SaveIgnoreList>Save List</SfButton>
    <SfTextBox Multiline="false" @bind-Value="@ignorePathToAdd" style="min-width:400px" />
    <SfButton style="margin-left:5px;margin-bottom:5px;margin-top:5px" @onclick=AddIgnorepath>Add</SfButton>
</div>

<div style="align-items:start">
    <SfGrid TValue="string" DataSource="@Cfg.IgnoreList" AllowSorting="true" EnableVirtualization="true" Height="480" EnableInfiniteScrolling="true" AllowSelection="false">
        <GridColumns>
            <GridColumn HeaderText="Ignored Paths" IsPrimaryKey="true">
                <Template>
                    @{
                        <div style="display:flex;flex-direction:row;text-align:center;align-items:center">
                            <SfButton @onclick="@(e => DeleteIgnoreListEntry(context as string))">Delete</SfButton>
                            <div style="margin-left:10px">@(context as string)</div>
                        </div>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>

<style>
    .a-text:visited {
        color: deepskyblue;
        background-color: transparent;
        text-decoration: none;
    }
</style>

@code {
    [CascadingParameter]
    private ConnectionInfo? connectionInfo { get; set; }

    private SfToast? ToastObj;
    private bool IsSpinnerVisible { get; set; } = false;
    private string currentDir { get; set; } = "";
    private string ignorePathToAdd { get; set; } = "";

    WebConfigModel Cfg;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Cfg = SearchService.GetWebConfigModel();
        SearchCacher.Data.SearchService.SubscribeToCurrentSearchDir(async (dir) =>
        {
            await InvokeAsync(() =>
            {
                currentDir = dir;
                StateHasChanged();
            });
        });
    }

    protected void SetConfig()
    {
        ShowToast("Setting Config...");
        Program.SetNewConfig(Cfg);
        ShowToast("Done. Restart Service to apply Config");
    }

    protected async Task InitDB()
    {
        IsSpinnerVisible = true;
        ShowToast("Initiating DB...");
        Task initDBTask = SearchService.InitDB();
        await initDBTask;

        if (initDBTask.Status != TaskStatus.RanToCompletion)
        {
            ShowToast("Failed to init DB. Ex: " + initDBTask.Exception?.ToString());
            return;
        }

        currentDir = "";
        ShowToast("Done");
        IsSpinnerVisible = false;
        StateHasChanged();
    }

    protected void DelDB()
    {
        IsSpinnerVisible = true;
        ShowToast("Deleting DB...");
        SearchService.DelDB();
        ShowToast("Done");
        IsSpinnerVisible = false;
    }

    protected void SaveDB()
    {
        IsSpinnerVisible = true;
        ShowToast("Saving DB...");
        SearchService.SaveDB();
        ShowToast("Done");
        IsSpinnerVisible = false;
    }

    protected void SaveIgnoreList()
    {
        SearchService.SetIgnoreList(Cfg.IgnoreList.ToList());
    }

    protected async void AddIgnorepath()
    {
        if (string.IsNullOrWhiteSpace(ignorePathToAdd))
        {
            ShowToast("Path is empty...");
            return;
        }

        while (ignorePathToAdd.EndsWith("\\"))
            ignorePathToAdd = ignorePathToAdd.Substring(0, ignorePathToAdd.Length - 1);

        if (!Cfg.IgnoreList.Contains(ignorePathToAdd))
        {
            Cfg.IgnoreList.Add(ignorePathToAdd);
            await Task.Delay(100);
            ShowToast("Added path");
            StateHasChanged();
        }
        else
            ShowToast("Path already in ignore list");
    }

    protected void DeleteIgnoreListEntry(string? path)
    {
        if (string.IsNullOrWhiteSpace(path))
            return;

        Cfg.IgnoreList.Remove(path);
        StateHasChanged();
    }

    protected async void ShowToast(string info, int timeout = 2500)
    {
        if (ToastObj is null)
            return;

        await ToastObj.ShowAsync(new ToastModel()
            {
                Content = info,
                Timeout = timeout
            });
    }

    protected bool IsValidUser()
    {
        if (SearchService.AllowOnlyLocalSettingsAccess())
        {
            if (connectionInfo is null)
                return false;

            if (string.IsNullOrWhiteSpace(connectionInfo.RemoteIpAddress))
            {
                ShowToast("Cannot verify user access");
                return false;
            }

            if (connectionInfo.RemoteIpAddress is not "127.0.0.1" and not "::1")
                return false;
        }

        return true;
    }
}
